#jinja2: lstrip_blocks: True, trim_blocks: True
no service pad
service tcp-keepalives-in
service tcp-keepalives-out
service timestamps debug datetime msec localtime show-timezone year
service timestamps log datetime msec localtime show-timezone year
service password-encryption
service linenumber
service compress-config
service sequence-numbers
no platform punt-keepalive disable-kernel-core
!
hostname {{ device.json.results[0]['name'] }}
!
boot-start-marker
boot-end-marker
!
vrf definition Mgmt-intf
 !
 address-family ipv4
 exit-address-family
 !
 address-family ipv6
 exit-address-family
!
aaa new-model
no ip bootp server
spanning-tree extend system-id
redundancy
 mode none
lldp run
!

{% for intf in interfaces.json.results %}

{% set intf_ips = ip_addresses.json.results
    | selectattr('assigned_object.name', 'equalto', intf.name) | list %}
{% set has_ip = intf_ips | length > 0 %}

{% if intf.name.startswith('vlan.') %}
interface vlan {{ intf.name.split('.')[1] }}
{% else %}
interface {{ intf.name }}
{% endif %}

{% if intf.description %}
  description {{ intf.description }}
{% endif %}

{% if intf.name.startswith('vlan.') %}
  {% for ip in intf_ips %}
  ip address {{ ip.address.split('/')[0] }} {{ ip.address | ansible.utils.ipaddr('netmask') }}
  {% endfor %}
  no shutdown

{% else %}
  {% if has_ip %}
  no switchport
    {% for ip in intf_ips %}
  ip address {{ ip.address.split('/')[0] }} {{ ip.address | ansible.utils.ipaddr('netmask') }}
    {% endfor %}
  no shutdown

  {% elif intf.mode and intf.mode.value == "access" %}
  switchport mode access
  switchport access vlan {{ intf.untagged_vlan.vid }}
  no shutdown

  {% elif intf.mode and intf.mode.value in ["tagged", "tagged-all"] %}
  switchport mode trunk
    {% if intf.tagged_vlans %}
  switchport trunk allowed vlan {{ intf.tagged_vlans | map(attribute='vid') | join(',') }}
    {% endif %}
  no shutdown

  {% else %}
  shutdown
  {% endif %}
{% endif %}
!
{% endfor %}

snmp-server community {{ device.json.results[0].config_context['snmp-ro-community'] }} RO
{% set latitude = site.json.results[0]['latitude'] %}
{% set longitude = site.json.results[0]['longitude'] %}
{% if latitude and longitude %}
snmp-server location {{ site.json.results[0]['region']['name'] }} [{{ latitude }},{{ longitude }}]
{% else %}
snmp-server location {{ site.json.results[0]['region']['name'] }}
{% endif %}
!
logging source-interface GigabitEthernet0
{% for syslog_server in device.json.results[0].config_context['syslog-servers'] %}
logging host {{ syslog_server }} transport udp port 1514
{% endfor %}
!
{% for ntp_server in device.json.results[0].config_context['ntp-servers'] %}
ntp server {{ ntp_server }}
{% endfor %}
!
{% for tacacs in device.json.results[0].config_context['tacacs-servers'] %}
tacacs server {{ tacacs.name }}
  address ipv4 {{ tacacs.address }}
  port {{ tacacs.port }}
  key {{ tacacs.key }}
  single-connection
!
{% endfor %}

aaa group server tacacs+ Techit_Tac_Grp
{% for tacacs in device.json.results[0].config_context['tacacs-servers'] %}
  server name {{ tacacs.name }}
{% endfor %}
!!! Change to MGMT VLAN, use only if required !!!
!!! ip tacacs source-interface vlan 300
!
{% for name_server in device.json.results[0].config_context['name-servers'] %}
ip name-server {{ name_server }}
{% endfor %}
!
line con 0
 logging synchronous
 stopbits 1
line aux 0
 stopbits 1
end
